---
import path from "node:path";
import Comment from "@components/comment/index.astro";
import License from "@components/misc/License.astro";
import Markdown from "@components/misc/Markdown.astro";
import PasswordProtection from "@components/PasswordProtection.astro";
import I18nKey from "@i18n/i18nKey";
import { i18n } from "@i18n/translation";
import MainGridLayout from "@layouts/MainGridLayout.astro";
import { getSortedPosts } from "@utils/content-utils";
import { getDir, getPostUrlBySlug } from "@utils/url-utils";
import { Icon } from "astro-icon/components";
import { licenseConfig } from "src/config";
import ImageWrapper from "../../components/misc/ImageWrapper.astro";
import PostMetadata from "../../components/PostMeta.astro";
import { profileConfig, siteConfig } from "../../config";
import { formatDateToYYYYMMDD } from "../../utils/date-utils";
import CryptoJS from "crypto-js";
import bcryptjs from "bcryptjs";
import { fetchArticleById, transformApiArticleToFrontend } from "../../utils/api-utils";
import { apiConfig } from "../../config";
// 在构建时生成静态路径
export async function getStaticPaths() {
	const blogEntries = await getSortedPosts();
	return blogEntries.map((entry) => ({
		params: { slug: entry.slug },
		props: { entry },
	}));
}

// 获取页面props
const { entry: staticEntry } = Astro.props;

// 客户端动态获取文章数据的脚本
const clientEntryScript = `
	(async function() {
		try {
			// 从配置中获取API基础URL
			const apiBaseUrl = '${apiConfig.baseUrl}';
			const debugMode = ${apiConfig.debug};
			
			// 尝试从API获取最新的文章数据
			const slug = '${staticEntry.slug}';
			let apiArticle = null;
			
			// 优先尝试通过ID获取文章（如果slug可能是数字ID）
			const idMatch = slug.match(/^\d+$/);
			if (idMatch) {
				const articleId = parseInt(idMatch[0]);
				try {
					const idResponse = await fetch(apiBaseUrl + '/articles/' + articleId);
					if (idResponse.ok) {
						const idResult = await idResponse.json();
						if (idResult.success && idResult.data) {
							apiArticle = idResult.data;
						}
					}
				} catch (idError) {
					if (debugMode) {
						console.warn('尝试通过ID获取文章失败:', idError);
					}
				}
			}
			
			// 如果通过ID获取失败或slug不是ID，则获取已发布文章列表并查找
			if (!apiArticle) {
				const response = await fetch(apiBaseUrl + '/articles/published');
				if (response.ok) {
					const result = await response.json();
					if (result.success && result.data) {
						// 查找当前文章
						apiArticle = result.data.find(article => 
							article.slug === slug || 
							article.title.replace(/\s+/g, '-').toLowerCase() === slug
						);
					}
				}
			}
			
			if (apiArticle && apiArticle.content) {
				if (debugMode) {
					console.log('成功从API获取最新文章数据:', apiArticle.title);
				}
				
				// 更新文章内容
				const contentElement = document.querySelector('.markdown-content');
				if (contentElement) {
					// 文章内容可能已经是HTML格式，直接使用
					contentElement.innerHTML = apiArticle.content;
				}
				
				// 更新其他文章信息
				if (apiArticle.title) {
					const titleElement = document.querySelector('[data-pagefind-meta="title"]');
					if (titleElement) {
						titleElement.textContent = apiArticle.title;
					}
				}
				
				// 更新元数据
				if (apiArticle.publishedDate) {
					const dateElement = document.querySelector('.post-meta .date');
					if (dateElement) {
						// 格式化日期
						const date = new Date(apiArticle.publishedDate);
						if (!isNaN(date.getTime())) {
							dateElement.textContent = date.toISOString().split('T')[0];
						}
					}
				}
			}
		} catch (error) {
			if (${import.meta.env.DEV} && debugMode) {
				console.log('动态获取文章数据失败，使用静态数据:', error);
			}
		}
	})();
`;

// 默认使用静态数据
let entry = staticEntry;
let Content = null;
let headings = [];
let remarkPluginFrontmatter = { words: 0, minutes: 0 };

// 尝试渲染内容
if (entry && typeof entry.render === 'function') {
	try {
		const renderResult = await entry.render();
		Content = renderResult.Content;
		headings = renderResult.headings || [];
		remarkPluginFrontmatter = renderResult.remarkPluginFrontmatter || remarkPluginFrontmatter;
	} catch (error) {
		console.warn('渲染文章内容失败，使用原始内容:', error);
		// 如果是API文章且有content属性，直接使用
		if (entry.body) {
			Content = () => entry.body;
		}
	}
}

// 处理加密逻辑
let encryptedContent = "";
let passwordHash = "";
let isEncrypted = entry.data.encrypted && entry.data.password;

if (isEncrypted) {
	// 对于加密文章，我们将使用内容进行加密
	// 在客户端解密后，会通过JavaScript重新渲染
	const contentToEncrypt = entry.body;

	// 使用AES加密内容
	encryptedContent = CryptoJS.AES.encrypt(
		contentToEncrypt,
		entry.data.password,
	).toString();

	// 生成密码哈希
	const saltRounds = 10;
	passwordHash = bcryptjs.hashSync(entry.data.password, saltRounds);
}

const jsonLd = {
	"@context": "https://schema.org",
	"@type": "BlogPosting",
	headline: entry.data.title,
	description: entry.data.description || entry.data.title,
	keywords: entry.data.tags,
	author: {
		"@type": "Person",
		name: profileConfig.name,
		url: Astro.site,
	},
	datePublished: formatDateToYYYYMMDD(entry.data.published),
	inLanguage: entry.data.lang
		? entry.data.lang.replace("_", "-")
		: siteConfig.lang.replace("_", "-"),
	// TODO include cover image here
};
---

<MainGridLayout
    banner={entry.data.image}
    title={entry.data.title}
    description={entry.data.description}
    lang={entry.data.lang}
    setOGTypeArticle={true}
    postSlug={entry.slug}
    headings={headings}
>
    <script
        is:inline
        slot="head"
        type="application/ld+json"
        set:html={JSON.stringify(jsonLd)}
    />
    <!-- 客户端动态获取最新文章数据 -->
    <script is:inline>{clientEntryScript}</script>
    <div
        class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative mb-4"
    >
        <div
            id="post-container"
            class:list={[
                "card-base z-10 px-6 md:px-9 pt-6 pb-4 relative w-full ",
                {},
            ]}
        >
            <!-- word count and reading time -->
            <div
                class="flex flex-row text-black/30 dark:text-white/30 gap-5 mb-3 transition onload-animation"
            >
                <div class="flex flex-row items-center">
                    <div
                        class="transition h-6 w-6 rounded-md bg-black/5 dark:bg-white/10 text-black/50 dark:text-white/50 flex items-center justify-center mr-2"
                    >
                        <Icon name="material-symbols:notes-rounded" />
                    </div>
                    <div class="text-sm">
                        {remarkPluginFrontmatter.words}
                        {" " + i18n(I18nKey.wordsCount)}
                    </div>
                </div>
                <div class="flex flex-row items-center">
                    <div
                        class="transition h-6 w-6 rounded-md bg-black/5 dark:bg-white/10 text-black/50 dark:text-white/50 flex items-center justify-center mr-2"
                    >
                        <Icon
                            name="material-symbols:schedule-outline-rounded"
                        />
                    </div>
                    <div class="text-sm">
                        {remarkPluginFrontmatter.minutes}
                        {
                            " " +
                                i18n(
                                    remarkPluginFrontmatter.minutes === 1
                                        ? I18nKey.minuteCount
                                        : I18nKey.minutesCount,
                                )
                        }
                    </div>
                </div>
            </div>

            <!-- title -->
            <div class="relative onload-animation">
                <div
                    data-pagefind-body
                    data-pagefind-weight="10"
                    data-pagefind-meta="title"
                    class="transition w-full block font-bold mb-3
                    text-3xl md:text-[2.25rem]/[2.75rem]
                    text-black/90 dark:text-white/90
                    md:before:w-1 before:h-5 before:rounded-md before:bg-[var(--primary)]
                    before:absolute before:top-[0.75rem] before:left-[-1.125rem]"
                >
                    {entry.data.title}
                </div>
            </div>

            <!-- metadata -->
            <div class="onload-animation">
                <PostMetadata
                    class="mb-5"
                    published={entry.data.published}
                    updated={entry.data.updated}
                    tags={entry.data.tags}
                    category={entry.data.category}
                    slug={entry.slug}
                />
                {
                    !entry.data.image && (
                        <div class="border-[var(--line-divider)] border-dashed border-b-[1px] mb-5" />
                    )
                }
            </div>

            <!-- always show cover as long as it has one -->

            {
                entry.data.image && (
                    <ImageWrapper
                        id="post-cover"
                        src={entry.data.image}
                        basePath={path.join("content/posts/", getDir(entry.id))}
                        class="mb-8 rounded-xl banner-container onload-animation"
                    />
                )
            }

            {
                isEncrypted ? (
                    <PasswordProtection
                        encryptedContent={encryptedContent}
                        passwordHash={passwordHash}
                    />
                ) : (
                    <>
                        <Markdown class="mb-6 markdown-content onload-animation">
                            <Content />
                        </Markdown>
                        {licenseConfig.enable && (
                            <License
                                title={entry.data.title}
                                slug={entry.slug}
                                pubDate={entry.data.published}
                                author={entry.data.author}
                                sourceLink={entry.data.sourceLink}
                                licenseName={entry.data.licenseName}
                                licenseUrl={entry.data.licenseUrl}
                                class="mb-6 rounded-xl license-container onload-animation"
                            />
                        )}
                    </>
                )
            }
        </div>
    </div>

    <!-- 评论 -->
    <Comment post={entry} />

    <div
        class="flex flex-col md:flex-row justify-between mb-4 gap-4 overflow-hidden w-full"
    >
        <a
            href={entry.data.nextSlug
                ? getPostUrlBySlug(entry.data.nextSlug)
                : "#"}
            class:list={[
                "w-full font-bold overflow-hidden active:scale-95",
                { "pointer-events-none": !entry.data.nextSlug },
            ]}
        >
            {
                entry.data.nextSlug && (
                    <div class="btn-card rounded-2xl w-full h-[3.75rem] max-w-full px-4 flex items-center !justify-start gap-4">
                        <Icon
                            name="material-symbols:chevron-left-rounded"
                            class="text-[2rem] text-[var(--primary)]"
                        />
                        <div class="overflow-hidden transition overflow-ellipsis whitespace-nowrap max-w-[calc(100%_-_3rem)] text-black/75 dark:text-white/75">
                            {entry.data.nextTitle}
                        </div>
                    </div>
                )
            }
        </a>

        <a
            href={entry.data.prevSlug
                ? getPostUrlBySlug(entry.data.prevSlug)
                : "#"}
            class:list={[
                "w-full font-bold overflow-hidden active:scale-95",
                { "pointer-events-none": !entry.data.prevSlug },
            ]}
        >
            {
                entry.data.prevSlug && (
                    <div class="btn-card rounded-2xl w-full h-[3.75rem] max-w-full px-4 flex items-center !justify-end gap-4">
                        <div class="overflow-hidden transition overflow-ellipsis whitespace-nowrap max-w-[calc(100%_-_3rem)] text-black/75 dark:text-white/75">
                            {entry.data.prevTitle}
                        </div>
                        <Icon
                            name="material-symbols:chevron-right-rounded"
                            class="text-[2rem] text-[var(--primary)]"
                        />
                    </div>
                )
            }
        </a>
    </div>
</MainGridLayout>
