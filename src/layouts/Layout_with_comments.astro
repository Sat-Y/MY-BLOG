---
// 导入字体资源 - 只加载最常用的字体权重，减少加载时间
import "@fontsource/roboto/400.css"; // 导入Roboto字体的400权重（常规字重）
import "@fontsource/roboto/700.css"; // 导入Roboto字体的700权重（粗体）

// 导入组件
import ConfigCarrier from "@components/ConfigCarrier.astro"; // 配置载体组件
import MusicPlayer from "@components/widget/MusicPlayer.svelte"; // 音乐播放器组件（Svelte实现）
import Pio from "@components/widget/Pio.svelte"; // Pio看板娘组件（Svelte实现）
import AdminButton from '../components/AdminButton.svelte'; // 管理员按钮组件

// 导入配置
import { profileConfig, siteConfig, widgetConfigs, umamiConfig } from "@/config"; // 导入站点、个人资料和小部件配置

// 导入常量
import {
  AUTO_MODE, // 自动主题模式
  BANNER_HEIGHT, // 普通页面banner高度
  BANNER_HEIGHT_EXTEND, // banner扩展高度
  BANNER_HEIGHT_HOME, // 首页banner高度
  DARK_MODE, // 暗色主题模式
  DEFAULT_THEME, // 默认主题
  LIGHT_MODE, // 亮色主题模式
  PAGE_WIDTH, // 页面宽度
} from "../constants/constants";

// 导入默认图标和类型定义
import { defaultFavicons } from "../constants/icon"; // 默认网站图标
import type { Favicon, SakuraConfig } from "../types/config"; // 导入类型定义

// 导入工具函数
import { pathsEqual, url } from "../utils/url-utils"; // URL处理工具函数

// 导入样式文件
import "katex/dist/katex.css"; // KaTeX数学公式渲染样式
import "../styles/mobile-navbar.css"; // 移动端导航栏样式
import "../styles/wallpaper-navbar-transparent.css"; // 透明导航栏壁纸样式

// 定义组件属性接口 - 用于类型检查和自动补全
interface Props {
  title?: string; // 页面标题（可选）
  banner?: string; // 页面横幅图片URL（可选）
  description?: string; // 页面描述（可选）
  lang?: string; // 页面语言（可选）
  setOGTypeArticle?: boolean; // 是否设置Open Graph类型为文章（可选）
  postSlug?: string; // 文章唯一标识（可选）
}

// 从组件属性中解构获取需要的值
let { title, banner, description, lang, setOGTypeArticle, postSlug } = 
  Astro.props;

// 判断当前是否为首页 - 通过比较URL路径
const isHomePage = pathsEqual(Astro.url.pathname, url("/"));

// 获取站点主题色调配置
const configHue = siteConfig.themeColor.hue;

// 获取导航栏透明模式配置
const navbarTransparentMode = 
  siteConfig.banner?.navbar?.transparentMode || "semi"; // 默认半透明模式
// 判断是否应该显示顶部高光效果（只在full和semifull模式下显示）
const shouldShowTopHighlight = 
  navbarTransparentMode === "full" || navbarTransparentMode === "semifull";

// 获取默认banner图片的辅助函数
const getDefaultBanner = (): string => {
  const src = siteConfig.banner.src;
  // 判断src是否为字符串类型
  if (typeof src === "string") {
    return src;
  }
  // 判断src是否为数组类型
  if (Array.isArray(src)) {
    return src[0] || "";
  }
  // 判断src是否为对象类型
  if (src && typeof src === "object") {
    // 优先使用desktop，如果没有则使用mobile
    const desktopSrc = src.desktop;
    const mobileSrc = src.mobile;
    if (typeof desktopSrc === "string") {
      return desktopSrc;
    }
    if (Array.isArray(desktopSrc) && desktopSrc.length > 0) {
      return desktopSrc[0];
    }
    if (typeof mobileSrc === "string") {
      return mobileSrc;
    }
    if (Array.isArray(mobileSrc) && mobileSrc.length > 0) {
      return mobileSrc[0];
    }
  }
  return ""; // 如果所有条件都不满足，返回空字符串
};

// 如果没有提供banner或者banner为空字符串，则使用默认banner
if (!banner || typeof banner !== "string" || banner.trim() === "") {
  banner = getDefaultBanner();
}

// 临时注释：目前不使用文章封面作为banner
banner = getDefaultBanner();

// 获取是否启用banner的配置
const enableBanner = siteConfig.banner.enable;

// 构建页面标题
let pageTitle: string;
if (title) {
  pageTitle = `${title} - ${siteConfig.title}`;
} else {
  pageTitle = siteConfig.subtitle
    ? `${siteConfig.title} - ${siteConfig.subtitle}`
    : siteConfig.title;
}

// 构建Open Graph图片URL（如果启用了自动生成OG图片且提供了文章slug）
let ogImageUrl: string | undefined;
if (siteConfig.generateOgImages && postSlug) {
  ogImageUrl = new URL(`/og/${postSlug}.png`, Astro.site).toString();
}

// 确定使用的网站图标
const favicons: Favicon[] = 
  siteConfig.favicon.length > 0 ? siteConfig.favicon : defaultFavicons;

// 设置页面语言
if (!lang) {
  lang = `${siteConfig.lang}`;
}
const siteLang = lang.replace("_", "-"); // 将语言代码中的下划线替换为连字符

// 定义banner位置偏移量配置
const bannerOffsetByPosition = {
  top: `${BANNER_HEIGHT_EXTEND}vh`,
  center: `${BANNER_HEIGHT_EXTEND / 2}vh`,
  bottom: "0",
};
// 根据配置获取实际的banner偏移量
const bannerOffset = 
  bannerOffsetByPosition[siteConfig.banner.position || "center"];

// 确定是否启用Umami统计
const umamiEnabled = umamiConfig.enabled || false;
const umamiScripts = umamiConfig.scripts || ""; // 获取Umami脚本配置
---

<!-- HTML文档开始 -->
<!DOCTYPE html>
<html lang={siteLang} class="bg-[var(--page-bg)] text-[14px] md:text-[16px]" 
      data-overlayscrollbars-initialize
>
  <head>
    <!-- 页面标题 -->
    <title>{pageTitle}</title>

    <!-- 元数据 -->
    <meta charset="UTF-8" /> <!-- 字符集 -->
    <meta name="description" content={description || pageTitle}> <!-- 页面描述 -->
    <meta name="author" content={profileConfig.name}> <!-- 作者信息 -->

    <!-- Open Graph协议元数据 - 用于社交媒体分享 -->
    <meta property="og:site_name" content={siteConfig.title}> <!-- 站点名称 -->
    <meta property="og:url" content={Astro.url}> <!-- 页面URL -->
    <meta property="og:title" content={pageTitle}> <!-- 分享标题 -->
    <meta property="og:description" content={description || pageTitle}> <!-- 分享描述 -->
    {ogImageUrl && <meta property="og:image" content={ogImageUrl} />} <!-- 分享图片（如果有） -->
    { // 根据是否设置为文章决定OG类型
      setOGTypeArticle ? (
        <meta property="og:type" content="article" /> <!-- 文章类型 -->
      ) : (
        <meta property="og:type" content="website" /> <!-- 网站类型 -->
      )
    }

    <!-- Twitter卡片元数据 -->
    <meta name="twitter:card" content="summary_large_image"> <!-- Twitter卡片类型 -->
    <meta property="twitter:url" content={Astro.url}> <!-- Twitter分享URL -->
    <meta name="twitter:title" content={pageTitle}> <!-- Twitter分享标题 -->
    <meta name="twitter:description" content={description || pageTitle}> <!-- Twitter分享描述 -->

    <!-- 视口设置 - 确保在移动设备上正确显示 -->
    <meta name="viewport" content="width=device-width" />
    <!-- 生成器信息 - 显示使用的Astro版本 -->
    <meta name="generator" content={Astro.generator} />
    
    <!-- 渲染网站图标 -->
    {favicons.map(favicon => (
      <link rel="icon" 
            href={favicon.src.startsWith('/') ? url(favicon.src) : favicon.src} 
            sizes={favicon.sizes} 
            media={favicon.theme && `(prefers-color-scheme: ${favicon.theme})`} 
      />
    ))}

    <!-- 页面主题设置脚本 - 在页面渲染前设置以避免闪烁 -->
    <script is:inline define:vars={{DEFAULT_THEME, LIGHT_MODE, DARK_MODE, AUTO_MODE, BANNER_HEIGHT_EXTEND, PAGE_WIDTH, configHue}}>
      // 从本地存储加载主题设置
      const theme = localStorage.getItem('theme') || DEFAULT_THEME;
      switch (theme) {
        case LIGHT_MODE:
          document.documentElement.classList.remove('dark'); // 移除暗色模式类
          break
        case DARK_MODE:
          document.documentElement.classList.add('dark'); // 添加暗色模式类
          break
        case AUTO_MODE:
          // 根据系统偏好设置主题
          if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
            document.documentElement.classList.add('dark');
          } else {
            document.documentElement.classList.remove('dark');
          }
      }

      // 从本地存储加载色调设置
      const hue = localStorage.getItem('hue') || configHue;
      document.documentElement.style.setProperty('--hue', hue);

      // 计算--banner-height-extend，需要是4的倍数以避免文本模糊
      let offset = Math.floor(window.innerHeight * (BANNER_HEIGHT_EXTEND / 100));
      offset = offset - offset % 4;
      document.documentElement.style.setProperty('--banner-height-extend', `${offset}px`);
    </script>
    
    <!-- 全局CSS变量定义 -->
    <style define:vars={{
      configHue,
      'page-width': `${PAGE_WIDTH}rem`,
    }}></style>  

    <!-- 允许子组件插入内容到head区域 -->
    <slot name="head"></slot>

    <!-- Pio 看板娘样式 -->
    <link rel="stylesheet" href="/pio/static/pio.css" />

    <!-- RSS订阅链接 -->
    <link rel="alternate" type="application/rss+xml" title={profileConfig.name} href={`${Astro.site}rss.xml`}/>

    <!-- Umami Analytics - 如果启用 -->
    {umamiEnabled && umamiScripts && <Fragment set:html={umamiScripts} />}

  </head>
  
  <!-- 页面主体 -->
  <body class=" min-h-screen " class:list={[{"lg:is-home": isHomePage, "enable-banner": enableBanner, "zen-maru-gothic-enabled": siteConfig.font.zenMaruGothic.enable, "hanalei-enabled": siteConfig.font.hanalei.enable}]}
        data-overlayscrollbars-initialize
  >
    <!-- 页面顶部渐变高光效果 - 只在full和semifull模式下显示 -->
    {shouldShowTopHighlight && <div class="top-gradient-highlight"></div>}
    
    <!-- 配置载体组件 -->
    <ConfigCarrier></ConfigCarrier>
    
    <!-- 主内容插槽 - 子组件内容会插入到这里 -->
    <slot />
    
    <!-- 音乐播放器组件 -->
    <MusicPlayer client:load /> <!-- client:load指令确保在客户端加载并执行 -->
    
    <!-- Pio 看板娘组件 -->
    <!-- 注意：Pio 组件需要放在 body 标签内，但要在其他内容之前 -->
    <!-- 如果启用了侧边栏，可能需要调整 z-index -->
    <Pio client:load />

    <!-- 管理员按钮（放在这里，在所有内容之后） -->
    <AdminButton client:load />

    <!-- 页面过渡时增加页面高度，防止滚动动画跳动 -->
    <div id="page-height-extend" class="hidden h-[300vh]"></div>

    <!-- 樱花飘落效果 -->
    {(widgetConfigs.sakura as SakuraConfig)?.enable && (
      <script define:vars={{ sakuraConfig: widgetConfigs.sakura }}>
        // 樱花对象类
        class Sakura {
          constructor(x, y, s, r, fn, idx, img, limitArray, config) {
            this.x = x; // X坐标
            this.y = y; // Y坐标
            this.s = s; // 大小
            this.r = r; // 旋转角度
            this.fn = fn; // 运动函数对象
            this.idx = idx; // 索引
            this.img = img; // 樱花图片
            this.limitArray = limitArray; // 限制次数数组
            this.config = config; // 配置对象
          }

          // 绘制樱花
          draw(cxt) {
            cxt.save();
            cxt.translate(this.x, this.y);
            cxt.rotate(this.r);
            cxt.drawImage(this.img, 0, 0, 40 * this.s, 40 * this.s);
            cxt.restore();
          }

          // 更新樱花位置和状态
          update() {
            this.x = this.fn.x(this.x, this.y);
            this.y = this.fn.y(this.y, this.y);
            this.r = this.fn.r(this.r);

            // 如果樱花越界，重新调整位置
            if (
              this.x > window.innerWidth ||
              this.x < 0 ||
              this.y > window.innerHeight ||
              this.y < 0
            ) {
              // 如果樱花不做限制
              if (this.limitArray[this.idx] === -1) {
                this.resetPosition();
              }
              // 否则樱花有限制
              else {
                if (this.limitArray[this.idx] > 0) {
                  this.resetPosition();
                  this.limitArray[this.idx]--;
                }
              }
            }
          }

          // 重置樱花位置
          resetPosition() {
            this.r = getRandom('fnr', this.config);
            if (Math.random() > 0.4) {
              this.x = getRandom('x', this.config);
              this.y = 0;
              this.s = getRandom('s', this.config);
              this.r = getRandom('r', this.config);
            } else {
              this.x = window.innerWidth;
              this.y = getRandom('y', this.config);
              this.s = getRandom('s', this.config);
              this.r = getRandom('r', this.config);
            }
          }
        }

        // 樱花列表类 - 管理多个樱花对象
        class SakuraList {
          constructor() {
            this.list = [];
          }

          push(sakura) {
            this.list.push(sakura);
          }

          update() {
            for (let i = 0, len = this.list.length; i < len; i++) {
              this.list[i].update();
            }
          }

          draw(cxt) {
            for (let i = 0, len = this.list.length; i < len; i++) {
              this.list[i].draw(cxt);
            }
          }

          get(i) {
            return this.list[i];
          }

          size() {
            return this.list.length;
          }
        }

        // 获取随机值的函数 - 根据不同选项返回不同类型的随机值
        function getRandom(option, config) {
          let ret;
          let random;

          switch (option) {
            case 'x':
              ret = Math.random() * window.innerWidth;
              break;
            case 'y':
              ret = Math.random() * window.innerHeight;
              break;
            case 's':
              ret = config.size.min + Math.random() * (config.size.max - config.size.min);
              break;
            case 'r':
              ret = Math.random() * 6;
              break;
            case 'fnx':
              random = config.speed.horizontal.min + Math.random() * (config.speed.horizontal.max - config.speed.horizontal.min);
              ret = function (x, y) {
                return x + random;
              };
              break;
            case 'fny':
              random = config.speed.vertical.min + Math.random() * (config.speed.vertical.max - config.speed.vertical.min);
              ret = function (x, y) {
                return y + random;
              };
              break;
            case 'fnr':
              ret = function (r) {
                return r + config.speed.rotation;
              };
              break;
          }
          return ret;
        }

        // 樱花管理器类 - 负责创建和管理樱花特效
        class SakuraManager {
          constructor(config) {
            this.config = config;
            this.canvas = null;
            this.ctx = null;
            this.sakuraList = null;
            this.animationId = null;
            this.img = null;
            this.isRunning = false;
          }

          // 初始化樱花特效
          async init() {
            if (!this.config.enable || this.isRunning) {
              return;
            }

            // 创建图片对象
            this.img = new Image();
            this.img.src = '/sakura.png'; // 使用樱花图片

            // 等待图片加载完成
            await new Promise((resolve, reject) => {
              if (this.img) {
                this.img.onload = () => resolve();
                this.img.onerror = () => reject(new Error('Failed to load sakura image'));
              }
            });

            this.createCanvas();
            this.createSakuraList();
            this.startAnimation();
            this.isRunning = true;
          }

          // 创建画布
          createCanvas() {
            this.canvas = document.createElement('canvas');
            this.canvas.height = window.innerHeight;
            this.canvas.width = window.innerWidth;
            this.canvas.setAttribute('style', `position: fixed; left: 0; top: 0; pointer-events: none; z-index: ${this.config.zIndex};`);
            this.canvas.setAttribute('id', 'canvas_sakura');
            document.body.appendChild(this.canvas);
            this.ctx = this.canvas.getContext('2d');

            // 监听窗口大小变化
            window.addEventListener('resize', this.handleResize.bind(this));
          }

          // 创建樱花列表
          createSakuraList() {
            if (!this.img || !this.ctx) return;

            this.sakuraList = new SakuraList();
            const limitArray = new Array(this.config.sakuraNum).fill(this.config.limitTimes);

            for (let i = 0; i < this.config.sakuraNum; i++) {
              const randomX = getRandom('x', this.config);
              const randomY = getRandom('y', this.config);
              const randomR = getRandom('r', this.config);
              const randomS = getRandom('s', this.config);
              const randomFnx = getRandom('fnx', this.config);
              const randomFny = getRandom('fny', this.config);
              const randomFnR = getRandom('fnr', this.config);

              const sakura = new Sakura(
                randomX,
                randomY,
                randomS,
                randomR,
                {
                  x: randomFnx,
                  y: randomFny,
                  r: randomFnR,
                },
                i,
                this.img,
                limitArray,
                this.config
              );

              sakura.draw(this.ctx);
              this.sakuraList.push(sakura);
            }
          }

          // 开始动画
          startAnimation() {
            if (!this.ctx || !this.canvas || !this.sakuraList) return;

            const animate = () => {
              if (!this.ctx || !this.canvas || !this.sakuraList) return;

              this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
              this.sakuraList.update();
              this.sakuraList.draw(this.ctx);
              this.animationId = requestAnimationFrame(animate);
            };

            this.animationId = requestAnimationFrame(animate);
          }

          // 处理窗口大小变化
          handleResize() {
            if (this.canvas) {
              this.canvas.width = window.innerWidth;
              this.canvas.height = window.innerHeight;
            }
          }

          // 停止樱花特效
          stop() {
            if (this.animationId) {
              cancelAnimationFrame(this.animationId);
              this.animationId = null;
            }

            if (this.canvas) {
              document.body.removeChild(this.canvas);
              this.canvas = null;
            }

            window.removeEventListener('resize', this.handleResize.bind(this));
            this.isRunning = false;
          }

          // 切换樱花特效
          toggle() {
            if (this.isRunning) {
              this.stop();
            } else {
              this.init();
            }
          }

          // 更新配置
          updateConfig(newConfig) {
            const wasRunning = this.isRunning;
            if (wasRunning) {
              this.stop();
            }
            this.config = newConfig;
            if (wasRunning && newConfig.enable) {
              this.init();
            }
          }

          // 获取运行状态
          getIsRunning() {
            return this.isRunning;
          }
        }

        // 创建全局樱花管理器实例
        let globalSakuraManager = null;

        // 初始化樱花特效
        function initSakura(config) {
          if (globalSakuraManager) {
            globalSakuraManager.updateConfig(config);
          } else {
            globalSakuraManager = new SakuraManager(config);
            if (config.enable) {
              globalSakuraManager.init();
            }
          }
        }

        // 樱花特效初始化 - 确保只初始化一次
        (function() {
          // 全局标记，确保樱花特效只初始化一次
          if (window.sakuraInitialized) {
            return;
          }
          
          // 初始化樱花特效的函数
          const setupSakura = () => {
            if (sakuraConfig.enable && !window.sakuraInitialized) {
              initSakura(sakuraConfig);
              window.sakuraInitialized = true;
            }
          };
          
          // 页面加载完成后初始化樱花特效
          if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', setupSakura);
          } else {
            setupSakura();
          }
        })();
      </script>
    )}
    
    <!-- 翻译功能集成 - 懒加载 -->
    {siteConfig.translate?.enable && (
      <script>
        // 懒加载translate.js，只有在需要时才加载
        window.loadTranslateScript = function() {
          if (window.translate || document.getElementById('translate-script')) {
            return Promise.resolve();
          }
          
          return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = '/translate.js';
            script.id = 'translate-script';
            script.async = true;
            script.onload = () => {
              if (typeof window.translate !== 'undefined') {
                resolve();
              } else {
                reject(new Error('translate.js loaded but window.translate not available'));
              }
            };
            script.onerror = reject;
            document.head.appendChild(script);
          });
        };
      </script>
    )}
  </body>
</html>

<!-- 全局样式定义 -->
<style is:global define:vars={{
  bannerOffset,
  'banner-height-home': `${BANNER_HEIGHT_HOME}vh`,
  'banner-height': `${BANNER_HEIGHT}vh`,
}}>
@tailwind components;
@layer components {
  /* 首页banner样式 */
  .enable-banner.is-home #banner-wrapper {
    @apply h-[var(--banner-height-home)] translate-y-[var(--banner-height-extend)]
  }
  /* 普通页面banner样式 */
  .enable-banner #banner-wrapper {
    @apply h-[var(--banner-height-home)]
  }

  /* 首页banner内容样式 */
  .enable-banner.is-home #banner {
    @apply h-[var(--banner-height-home)] translate-y-0
  }
  /* 普通页面banner内容样式 */
  .enable-banner #banner {
    @apply h-[var(--banner-height-home)] translate-y-[var(--bannerOffset)]
  }
  /* 首页主内容区域偏移 */
  .enable-banner.is-home #main-grid {
    @apply translate-y-[var(--banner-height-extend)];
  }
  /* banner启用时顶部行高 */
  .enable-banner #top-row {
    @apply h-[calc(var(--banner-height-home)_-_4.5rem)] transition-all duration-300
  }
  /* 首页侧边栏粘性定位调整 */
  .enable-banner.is-home #sidebar-sticky {
    @apply top-[calc(1rem_-_var(--banner-height-extend))]
  }
  /* 导航栏隐藏样式 */
  .navbar-hidden {
    @apply opacity-0 -translate-y-16
  }
  
  /* 波浪动画效果 */
  .waves > .parallax use {
    animation: wave 25s cubic-bezier(0.5, 0.5, 0.45, 0.5) infinite;
  }

  @keyframes wave {
    0% {
      transform: translate3d(-90px, 0, 0);
    }
    100% {
      transform: translate3d(85px, 0, 0);
    }
  }
}
</style>

<!-- 客户端脚本 -->
<script>
import { animationManager } from '../utils/animation-utils'; // 动画管理器
import 'overlayscrollbars/overlayscrollbars.css'; // 自定义滚动条样式
import {
  OverlayScrollbars,
  // ScrollbarsHidingPlugin,
  // SizeObserverPlugin,
  // ClickScrollPlugin
} from 'overlayscrollbars'; // 导入OverlayScrollbars库
import {getHue, getStoredTheme, setHue, setTheme} from "../utils/setting-utils"; // 主题设置工具函数
import {pathsEqual, url} from "../utils/url-utils"; // URL处理工具函数
import {
  BANNER_HEIGHT,
  BANNER_HEIGHT_HOME,
  BANNER_HEIGHT_EXTEND,
  MAIN_PANEL_OVERLAPS_BANNER_HEIGHT
} from "../constants/constants"; // 导入常量
import { siteConfig } from '../config'; // 导入站点配置

/* 预加载字体 - 目前已注释掉
(async function() {
  try {
    await Promise.all([
      document.fonts.load("400 1em Roboto"),
      document.fonts.load("700 1em Roboto"),
    ]);
    document.body.classList.remove("hidden");
  } catch (error) {
    console.log("Failed to load fonts:", error);
  }
})();
*/

/* 临时解决方案：用于修复过渡激活时的样式闪烁问题
function disableAnimation() {
  const css = document.createElement('style')
  css.appendChild(
    document.createTextNode(
      `*{ -webkit-transition:none!important; -moz-transition:none!important; -o-transition:none!important; -ms-transition:none!important; transition:none!important }`
    )
  )
  document.head.appendChild(css)

  return () => {
    // 强制重新计算样式
    ;(() => window.getComputedStyle(document.body))()

    // 等待下一帧再移除
    setTimeout(() => {
      document.head.removeChild(css)
    }, 1)
  }
}
*/

// 检查是否启用了banner
const bannerEnabled = !!document.getElementById('banner-wrapper')

// 设置点击面板外部关闭面板的功能
function setClickOutsideToClose(panel: string, ignores: string[]) {
  document.addEventListener("click", event => {
    let panelDom = document.getElementById(panel);
    let tDom = event.target;
    if (!(tDom instanceof Node)) return; // 确保事件目标是HTML节点
    // 检查点击目标是否在忽略列表中
    for (let ig of ignores) {
      let ie = document.getElementById(ig)
      if (ie == tDom || (ie?.contains(tDom))) {
        return;
      }
    }
    panelDom!.classList.add("hidden"); // 隐藏面板
  });
}

// 初始化自定义滚动条
function initOverlayScrollbars() {
  if (!siteConfig.overlayScrollbars.enable) return;
  // 使用OverlayScrollbars配置自定义滚动条
  OverlayScrollbars(document.body, {
    className: "os-theme-material-dark",
    sizeAutoCapable: true,
    paddingAbsolute: true,
    scrollbars: {
      clickScrolling: true,
      dragScrolling: true,
      autoHide: "scroll",
      autoHideDelay: 800,
    },
  });
}

// 初始化页面
function initPage() {
  initOverlayScrollbars(); // 初始化滚动条
  
  // 为移动设备菜单设置点击外部关闭功能
  if (siteConfig.sidebar.enable) {
    setClickOutsideToClose("sidebar", ["sidebar-toggle", "sidebar"]);
  }
  setClickOutsideToClose("mobile-navbar-menu", ["mobile-navbar-toggle"]);
  
  // 初始化动画管理器
  animationManager.init();
}

// 在DOM内容加载完成后初始化页面
if (document.readyState === "loading") {
  document.addEventListener("DOMContentLoaded", initPage);
} else {
  initPage();
}
</script>